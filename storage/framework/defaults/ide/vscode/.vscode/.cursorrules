Code Style and Structure:

- Write concise, technical TypeScript code with accurate examples
- If Bun native modules are available, use them
- Use functional and declarative programming patterns; avoid classes unless needed
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

Naming Conventions:

- Use lowercase with dashes for directories (e.g., components/auth-wizard), except the ./app dir which uses camelcasing
- Favor named exports for components

TypeScript Usage:

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

Syntax and Formatting:

- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements

Error Handling and Validation:

- Prioritize error handling: handle errors and edge cases early
- Use early returns and guard clauses
- Implement proper error logging and user-friendly messages
- use nerverthrow to handle errors and responses
- Use Zod for form validation
- Use error boundaries for unexpected errors

UI and Styling:

- Use Vue.js Single File Components for components
- Implement styling & responsive design with Tailwind CSS; use a mobile-first approach

Performance Optimization:

- Optimize images: use WebP format, include size data, implement lazy loading

Key Conventions:

- Optimize Web Vitals (LCP, CLS, FID)
- Use vueuse functions where possible because they are auto-imported
- If there are two equally valid implementations, the browser version should be preferred
- Aim for 100% test coverage
- Use Composition API
- Use setup script
- Avoid usage of any

Follow Vue.js docs for where makes sense
